#! /usr/bin/env ruby
require 'optparse'
require 'eventmachine'

module Crocodile
  def self.print_help
    $stdout.puts "Usage: crocodile [-d] [-p /path/to/pids] job_name (start|stop)"
  end
end

class CrocodileProcess
  def initialize(job_name, pids_dir)
    @name = job_name
    @job_path = File.expand_path("jobs/#{job_name}")
    @pid_path = File.expand_path("#{job_name}.pid", pids_dir)
  end

  def start
    require @job_path
    job_class = constantize(@name)

    Signal.trap("INT")  { EventMachine.stop }
    Signal.trap("TERM") { EventMachine.stop }

    EventMachine.run do
      timer = EventMachine::PeriodicTimer.new(job_class.interval || 60) do
        job_class.logger.info job_class.message
        job_class.run
        if job_class.one_run_only
          timer.cancel
          EventMachine.stop
        end
      end
    end
  end
  
  def stop
    if File.exists?(@pid_path)
      Process.kill :TERM, File.open(@pid_path).read.strip.to_i
      File.delete(@pid_path)
      true
    else
      false
    end
  end

  def daemonize!
    Process.daemon(true)
    File.open(@pid_path, File::RDWR|File::EXCL|File::CREAT, 0600) { |io| io.write(Process.pid) }
  end

  def clean
    if File.exists?(@pid_path)
      File.delete(@pid_path)
    end
  end

  def constantize(name)
    eval name.split("_").push("job").map(&:capitalize).join
  end
end

opts = {}

OptionParser.new do |options|
  options.on("-d", "--daemonize", "Run process in background") do |d|
    opts[:daemonize] = d
  end

  options.on("-p", "--pids-dir=PIDS", "Where to store pids files") do |p|
    opts[:pids_dir] = p
  end
end.parse!

job_name = ARGV.shift
action   = ARGV.shift

unless job_name
  $stderr.puts "Must indicate a worker name"
  Crocodile.print_help
  exit 1
end

unless action
  $stderr.puts "Must indicate an action"
  Crocodile.print_help
  exit 1
end

$stdout.sync = true

pids_dir = opts[:pids_dir] || File.expand_path("jobs/pids")

process = CrocodileProcess.new(job_name, pids_dir)

case action
when "start"
  if opts[:daemonize]
    process.daemonize!
  end

  $stdout.puts "Starting Job #{job_name} #{opts[:daemonize] ? "(daemonized)" : ""}"
  process.start

when "stop"
  $stdout.puts "Stopping Job #{job_name}"
  if process.stop
    $stdout.puts "Stopped"
  else
    $stderr.puts "PID file not found"
  end

else
  Crocodile.print_help
  exit 2
end

at_exit do
  process.clean
end

